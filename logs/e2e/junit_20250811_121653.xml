<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="9" skipped="0" tests="45" time="3436.341" timestamp="2025-08-11T12:16:54.330411" hostname="mac.lan"><testcase classname="tests.e2e.test_ai_routing.TestAIRouting" name="test_task_query_routes_to_reclaim" time="57.532" /><testcase classname="tests.e2e.test_ai_routing.TestAIRouting" name="test_event_query_routes_to_nylas" time="62.853" /><testcase classname="tests.e2e.test_approval_flow_e2e.TestApprovalFlowE2E" name="test_task_delete_no_approval_flow" time="26.575" /><testcase classname="tests.e2e.test_approval_flow_e2e.TestApprovalFlowE2E" name="test_event_with_participants_approval_flow" time="56.898" /><testcase classname="tests.e2e.test_approval_flow_e2e.TestApprovalFlowE2E" name="test_event_cancel_solo_no_approval_flow" time="657.303" /><testcase classname="tests.e2e.test_approval_flow_e2e.TestApprovalFlowE2E" name="test_bulk_operation_approval_flow" time="68.132" /><testcase classname="tests.e2e.test_check_availability_e2e.TestCheckAvailabilityE2E" name="test_check_specific_time_available" time="56.737" /><testcase classname="tests.e2e.test_check_availability_e2e.TestCheckAvailabilityE2E" name="test_check_specific_time_busy" time="83.553" /><testcase classname="tests.e2e.test_check_availability_e2e.TestCheckAvailabilityE2E" name="test_find_time_slots" time="66.763" /><testcase classname="tests.e2e.test_check_availability_e2e.TestCheckAvailabilityE2E" name="test_check_various_durations" time="97.487" /><testcase classname="tests.e2e.test_check_availability_e2e.TestCheckAvailabilityE2E" name="test_natural_language_time_expressions" time="73.579"><failure message="Failed: AI Grading Failed:&#10;The expected behavior is to parse the natural language time expression &quot;this afternoon&quot; and check availability within that time reference, returning availability information. While the response does return availability information and includes one valid afternoon slot (15:00–16:00 today), it also includes slots outside the specified time range: a morning slot today (09:00–10:00) and a morning slot tomorrow (09:00–10:00). Additionally, the time_range field is &quot;today&quot; but the response includes a slot for tomorrow, which contradicts the stated range. These issues indicate the system did not correctly interpret and constrain the availability search to &quot;this afternoon.&quot; Therefore, it does not fully meet the expected behavior.">tests/e2e/test_check_availability_e2e.py:169: in test_natural_language_time_expressions
    assert_response_fulfills_expectation(
tests/e2e/utils/test_helpers.py:41: in assert_response_fulfills_expectation
    pytest.fail(f"AI Grading Failed:\n{result.reasoning}")
E   Failed: AI Grading Failed:
E   The expected behavior is to parse the natural language time expression "this afternoon" and check availability within that time reference, returning availability information. While the response does return availability information and includes one valid afternoon slot (15:00–16:00 today), it also includes slots outside the specified time range: a morning slot today (09:00–10:00) and a morning slot tomorrow (09:00–10:00). Additionally, the time_range field is "today" but the response includes a slot for tomorrow, which contradicts the stated range. These issues indicate the system did not correctly interpret and constrain the availability search to "this afternoon." Therefore, it does not fully meet the expected behavior.</failure></testcase><testcase classname="tests.e2e.test_check_availability_e2e.TestCheckAvailabilityE2E" name="test_working_hours_consideration" time="56.971"><failure message="Failed: AI Grading Failed:&#10;The expected behavior requires that when checking availability at 10pm (outside typical working hours), the system should either (a) show availability with a note acknowledging it’s outside working hours, or (b) indicate that it’s outside working hours. The actual response reports availability with no conflicts and no mention of working hours or any note indicating that 10pm is outside typical working hours. Therefore, it does not meet the requirement to include a working-hours consideration when declaring availability. Approval flow, routing, and other criteria are not applicable here; the core requirement about working-hours acknowledgment was missed.">tests/e2e/test_check_availability_e2e.py:189: in test_working_hours_consideration
    assert_response_fulfills_expectation(
tests/e2e/utils/test_helpers.py:41: in assert_response_fulfills_expectation
    pytest.fail(f"AI Grading Failed:\n{result.reasoning}")
E   Failed: AI Grading Failed:
E   The expected behavior requires that when checking availability at 10pm (outside typical working hours), the system should either (a) show availability with a note acknowledging it’s outside working hours, or (b) indicate that it’s outside working hours. The actual response reports availability with no conflicts and no mention of working hours or any note indicating that 10pm is outside typical working hours. Therefore, it does not meet the requirement to include a working-hours consideration when declaring availability. Approval flow, routing, and other criteria are not applicable here; the core requirement about working-hours acknowledgment was missed.</failure></testcase><testcase classname="tests.e2e.test_conflict_resolution_e2e.TestConflictResolutionE2E" name="test_event_conflict_detection" time="65.390"><failure message="Failed: AI Grading Failed:&#10;AI grader returned empty response - unable to determine verdict">tests/e2e/test_conflict_resolution_e2e.py:83: in test_event_conflict_detection
    assert_response_fulfills_expectation(
tests/e2e/utils/test_helpers.py:41: in assert_response_fulfills_expectation
    pytest.fail(f"AI Grading Failed:\n{result.reasoning}")
E   Failed: AI Grading Failed:
E   AI grader returned empty response - unable to determine verdict</failure></testcase><testcase classname="tests.e2e.test_conflict_resolution_e2e.TestConflictResolutionE2E" name="test_conflict_approval_flow" time="42.471" /><testcase classname="tests.e2e.test_conflict_resolution_e2e.TestConflictResolutionE2E" name="test_buffer_time_conflict" time="31.889"><failure message="assert None is True&#10; +  where None = &lt;built-in method get of dict object at 0x10d06bf40&gt;('needs_approval')&#10; +    where &lt;built-in method get of dict object at 0x10d06bf40&gt; = {'action': 'created', 'data': {'id': '82jtduqg0j7hm1r5eq80ekqj4o', 'participants': [], 'title': 'Team Sync', 'when': {'end': 1755037800, 'start': 1755034200}}, 'message': &quot;Successfully rescheduled 'Team Sync' to the scheduled time to avoid a time conflict. &quot;, 'provider': 'nylas', ...}.get">tests/e2e/test_conflict_resolution_e2e.py:259: in test_buffer_time_conflict
    assert data.get("needs_approval") is True
E   assert None is True
E    +  where None = &lt;built-in method get of dict object at 0x10d06bf40&gt;('needs_approval')
E    +    where &lt;built-in method get of dict object at 0x10d06bf40&gt; = {'action': 'created', 'data': {'id': '82jtduqg0j7hm1r5eq80ekqj4o', 'participants': [], 'title': 'Team Sync', 'when': {'end': 1755037800, 'start': 1755034200}}, 'message': "Successfully rescheduled 'Team Sync' to the scheduled time to avoid a time conflict. ", 'provider': 'nylas', ...}.get</failure></testcase><testcase classname="tests.e2e.test_conflict_resolution_e2e.TestConflictResolutionE2E" name="test_working_hours_scheduling" time="54.699"><failure message="Failed: AI Grading Failed:&#10;- The expected behavior requires detecting a scheduling conflict and requiring approval. Alternatively, suggesting an alternative time (e.g., next working day) would also satisfy the test.&#10;- The actual response shows success=true with action &quot;created&quot; and no needs_approval flag. It executed the scheduling without requiring approval.&#10;- The message states it “successfully rescheduled … to avoid a time conflict,” but no approval was requested and no alternative time suggestion was provided. This conflicts with the expected need for approval upon conflict detection.&#10;- The response does not suggest the next working day as indicated by the context; it merely asserts that a conflict was avoided.&#10;- Approval flow success would have been acceptable (needs_approval=true with appropriate action_type), but that is absent here.&#10;- Therefore, it does not fulfill the expected behavior of requiring approval (or suggesting an alternative time).">tests/e2e/test_conflict_resolution_e2e.py:317: in test_working_hours_scheduling
    assert_response_fulfills_expectation(
tests/e2e/utils/test_helpers.py:41: in assert_response_fulfills_expectation
    pytest.fail(f"AI Grading Failed:\n{result.reasoning}")
E   Failed: AI Grading Failed:
E   - The expected behavior requires detecting a scheduling conflict and requiring approval. Alternatively, suggesting an alternative time (e.g., next working day) would also satisfy the test.
E   - The actual response shows success=true with action "created" and no needs_approval flag. It executed the scheduling without requiring approval.
E   - The message states it “successfully rescheduled … to avoid a time conflict,” but no approval was requested and no alternative time suggestion was provided. This conflicts with the expected need for approval upon conflict detection.
E   - The response does not suggest the next working day as indicated by the context; it merely asserts that a conflict was avoided.
E   - Approval flow success would have been acceptable (needs_approval=true with appropriate action_type), but that is absent here.
E   - Therefore, it does not fulfill the expected behavior of requiring approval (or suggesting an alternative time).</failure></testcase><testcase classname="tests.e2e.test_conflict_resolution_e2e.TestConflictResolutionE2E" name="test_no_available_slot" time="22.116" /><testcase classname="tests.e2e.test_debug_ai_classification.TestDebugAIClassification" name="test_task_classification" time="35.150" /><testcase classname="tests.e2e.test_debug_ai_classification.TestDebugAIClassification" name="test_event_classification" time="69.540" /><testcase classname="tests.e2e.test_duplicate_detection_e2e.TestDuplicateDetectionE2E" name="test_duplicate_event_detection" time="44.395" /><testcase classname="tests.e2e.test_duplicate_detection_e2e.TestDuplicateDetectionE2E" name="test_duplicate_event_approval_flow" time="52.597" /><testcase classname="tests.e2e.test_duplicate_detection_e2e.TestDuplicateDetectionE2E" name="test_duplicate_task_detection" time="27.154" /><testcase classname="tests.e2e.test_duplicate_detection_e2e.TestDuplicateDetectionE2E" name="test_fuzzy_title_matching" time="64.735" /><testcase classname="tests.e2e.test_find_and_analyze_e2e.TestFindAndAnalyzeE2E" name="test_search_todays_items" time="33.681"><failure message="Failed: AI Grading Failed:&#10;The expected behavior is to search for today's calendar items across both tasks and events and return results that include at least the financial report task. The actual response returns empty arrays for both events and tasks and states &quot;No items found matching your search,&quot; despite success=true. This does not satisfy the requirement to return today's items, nor does it include the required financial report task. Approval flow is irrelevant here, and different response formats would be acceptable only if they achieved the goal of returning the items, which this response does not. Hence, it fails to meet the expected behavior.">tests/e2e/test_find_and_analyze_e2e.py:82: in test_search_todays_items
    assert_response_fulfills_expectation(
tests/e2e/utils/test_helpers.py:41: in assert_response_fulfills_expectation
    pytest.fail(f"AI Grading Failed:\n{result.reasoning}")
E   Failed: AI Grading Failed:
E   The expected behavior is to search for today's calendar items across both tasks and events and return results that include at least the financial report task. The actual response returns empty arrays for both events and tasks and states "No items found matching your search," despite success=true. This does not satisfy the requirement to return today's items, nor does it include the required financial report task. Approval flow is irrelevant here, and different response formats would be acceptable only if they achieved the goal of returning the items, which this response does not. Hence, it fails to meet the expected behavior.</failure></testcase><testcase classname="tests.e2e.test_find_and_analyze_e2e.TestFindAndAnalyzeE2E" name="test_search_by_keyword" time="44.646" /><testcase classname="tests.e2e.test_find_and_analyze_e2e.TestFindAndAnalyzeE2E" name="test_search_overdue_tasks" time="37.384" /><testcase classname="tests.e2e.test_find_and_analyze_e2e.TestFindAndAnalyzeE2E" name="test_workload_analysis" time="48.426" /><testcase classname="tests.e2e.test_find_and_analyze_e2e.TestFindAndAnalyzeE2E" name="test_time_range_searches" time="97.230" /><testcase classname="tests.e2e.test_find_and_analyze_e2e.TestFindAndAnalyzeE2E" name="test_empty_search_results" time="91.956" /><testcase classname="tests.e2e.test_hybrid_workflows_e2e.TestHybridWorkflowsE2E" name="test_check_availability_then_schedule" time="19.772"><failure message="Failed: AI Grading Failed:&#10;The expected behavior is to check availability for a 1-hour meeting tomorrow afternoon and return available time slots. While the response correctly reflects the requested duration (60 minutes) and returns slots, both slots are 9:00–10:00, which is morning, not afternoon. Additionally, one slot is on 2025-08-13, which is not &quot;tomorrow&quot; given the current date context (2025-08-11), and the response claims time_range &quot;tomorrow&quot; while including a slot for the day after tomorrow. These mismatches mean the response does not fulfill the time constraints of &quot;tomorrow afternoon.&quot;">tests/e2e/test_hybrid_workflows_e2e.py:24: in test_check_availability_then_schedule
    assert_response_fulfills_expectation(
tests/e2e/utils/test_helpers.py:41: in assert_response_fulfills_expectation
    pytest.fail(f"AI Grading Failed:\n{result.reasoning}")
E   Failed: AI Grading Failed:
E   The expected behavior is to check availability for a 1-hour meeting tomorrow afternoon and return available time slots. While the response correctly reflects the requested duration (60 minutes) and returns slots, both slots are 9:00–10:00, which is morning, not afternoon. Additionally, one slot is on 2025-08-13, which is not "tomorrow" given the current date context (2025-08-11), and the response claims time_range "tomorrow" while including a slot for the day after tomorrow. These mismatches mean the response does not fulfill the time constraints of "tomorrow afternoon."</failure></testcase><testcase classname="tests.e2e.test_hybrid_workflows_e2e.TestHybridWorkflowsE2E" name="test_find_tasks_and_complete" time="20.533" /><testcase classname="tests.e2e.test_hybrid_workflows_e2e.TestHybridWorkflowsE2E" name="test_analyze_workload_then_optimize" time="57.729" /><testcase classname="tests.e2e.test_hybrid_workflows_e2e.TestHybridWorkflowsE2E" name="test_task_to_calendar_event_conversion" time="33.488" /><testcase classname="tests.e2e.test_hybrid_workflows_e2e.TestHybridWorkflowsE2E" name="test_full_productivity_workflow" time="18.326" /><testcase classname="tests.e2e.test_manage_productivity_e2e.TestManageProductivityE2E" name="test_create_reclaim_task" time="17.205" /><testcase classname="tests.e2e.test_manage_productivity_e2e.TestManageProductivityE2E" name="test_create_nylas_event" time="19.760"><failure message="Failed: AI Grading Failed:&#10;The expected behavior explicitly requires an approval flow because a team standup involves other participants. The actual response shows a completed creation (success=true, action=created) with no needs_approval flag and no action_type for approval. Additionally, the participants list is empty, which contradicts the scenario of involving other participants. Per the criteria, approval flows are valid successes only if needs_approval=true is present; a direct creation without approval does not meet the expectation that approval is required. Therefore, the response does not fulfill the expected behavior.">tests/e2e/test_manage_productivity_e2e.py:87: in test_create_nylas_event
    assert_response_fulfills_expectation(
tests/e2e/utils/test_helpers.py:41: in assert_response_fulfills_expectation
    pytest.fail(f"AI Grading Failed:\n{result.reasoning}")
E   Failed: AI Grading Failed:
E   The expected behavior explicitly requires an approval flow because a team standup involves other participants. The actual response shows a completed creation (success=true, action=created) with no needs_approval flag and no action_type for approval. Additionally, the participants list is empty, which contradicts the scenario of involving other participants. Per the criteria, approval flows are valid successes only if needs_approval=true is present; a direct creation without approval does not meet the expectation that approval is required. Therefore, the response does not fulfill the expected behavior.</failure></testcase><testcase classname="tests.e2e.test_manage_productivity_e2e.TestManageProductivityE2E" name="test_update_task_complete" time="25.340" /><testcase classname="tests.e2e.test_manage_productivity_e2e.TestManageProductivityE2E" name="test_reschedule_event" time="58.446"><failure message="Failed: AI Grading Failed:&#10;The expected behavior is to successfully reschedule the event to 4pm and update it. The actual response returns an ambiguity error, success=false, and no update occurred. This is not an approval-flow case (the expected behavior does not say &quot;after approval if needed&quot;), so a needs_approval path is not applicable. Although the response is routed to Nylas, this test is not an AI routing test; the goal is to complete the reschedule. Therefore, the response does not fulfill the expected behavior.">tests/e2e/test_manage_productivity_e2e.py:311: in test_reschedule_event
    assert_response_fulfills_expectation(
tests/e2e/utils/test_helpers.py:41: in assert_response_fulfills_expectation
    pytest.fail(f"AI Grading Failed:\n{result.reasoning}")
E   Failed: AI Grading Failed:
E   The expected behavior is to successfully reschedule the event to 4pm and update it. The actual response returns an ambiguity error, success=false, and no update occurred. This is not an approval-flow case (the expected behavior does not say "after approval if needed"), so a needs_approval path is not applicable. Although the response is routed to Nylas, this test is not an AI routing test; the goal is to complete the reschedule. Therefore, the response does not fulfill the expected behavior.</failure></testcase><testcase classname="tests.e2e.test_manage_productivity_e2e.TestManageProductivityE2E" name="test_natural_language_variations" time="94.375" /><testcase classname="tests.e2e.test_optimize_schedule_e2e.TestOptimizeScheduleE2E" name="test_optimize_for_focus_time" time="111.000" /><testcase classname="tests.e2e.test_optimize_schedule_e2e.TestOptimizeScheduleE2E" name="test_balance_workload_optimization" time="159.998" /><testcase classname="tests.e2e.test_optimize_schedule_e2e.TestOptimizeScheduleE2E" name="test_meeting_reduction_optimization" time="142.189" /><testcase classname="tests.e2e.test_optimize_schedule_e2e.TestOptimizeScheduleE2E" name="test_priority_based_optimization" time="137.150" /><testcase classname="tests.e2e.test_optimize_schedule_e2e.TestOptimizeScheduleE2E" name="test_energy_based_optimization" time="156.839" /><testcase classname="tests.e2e.test_optimize_schedule_e2e.TestOptimizeScheduleE2E" name="test_natural_language_optimization_requests" time="136.219" /></testsuite></testsuites>